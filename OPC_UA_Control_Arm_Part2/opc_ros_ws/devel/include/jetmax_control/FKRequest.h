// Generated by gencpp from file jetmax_control/FKRequest.msg
// DO NOT EDIT!


#ifndef JETMAX_CONTROL_MESSAGE_FKREQUEST_H
#define JETMAX_CONTROL_MESSAGE_FKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jetmax_control
{
template <class ContainerAllocator>
struct FKRequest_
{
  typedef FKRequest_<ContainerAllocator> Type;

  FKRequest_()
    : angle_rotate(0.0)
    , angle_left(0.0)
    , angle_right(0.0)  {
    }
  FKRequest_(const ContainerAllocator& _alloc)
    : angle_rotate(0.0)
    , angle_left(0.0)
    , angle_right(0.0)  {
  (void)_alloc;
    }



   typedef double _angle_rotate_type;
  _angle_rotate_type angle_rotate;

   typedef double _angle_left_type;
  _angle_left_type angle_left;

   typedef double _angle_right_type;
  _angle_right_type angle_right;





  typedef boost::shared_ptr< ::jetmax_control::FKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetmax_control::FKRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FKRequest_

typedef ::jetmax_control::FKRequest_<std::allocator<void> > FKRequest;

typedef boost::shared_ptr< ::jetmax_control::FKRequest > FKRequestPtr;
typedef boost::shared_ptr< ::jetmax_control::FKRequest const> FKRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetmax_control::FKRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetmax_control::FKRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetmax_control::FKRequest_<ContainerAllocator1> & lhs, const ::jetmax_control::FKRequest_<ContainerAllocator2> & rhs)
{
  return lhs.angle_rotate == rhs.angle_rotate &&
    lhs.angle_left == rhs.angle_left &&
    lhs.angle_right == rhs.angle_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetmax_control::FKRequest_<ContainerAllocator1> & lhs, const ::jetmax_control::FKRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetmax_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::jetmax_control::FKRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetmax_control::FKRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetmax_control::FKRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetmax_control::FKRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetmax_control::FKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetmax_control::FKRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetmax_control::FKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc78582ee0d138ee3fa007868686f159";
  }

  static const char* value(const ::jetmax_control::FKRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc78582ee0d138eeULL;
  static const uint64_t static_value2 = 0x3fa007868686f159ULL;
};

template<class ContainerAllocator>
struct DataType< ::jetmax_control::FKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetmax_control/FKRequest";
  }

  static const char* value(const ::jetmax_control::FKRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetmax_control::FKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 angle_rotate\n"
"float64 angle_left\n"
"float64 angle_right\n"
;
  }

  static const char* value(const ::jetmax_control::FKRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetmax_control::FKRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_rotate);
      stream.next(m.angle_left);
      stream.next(m.angle_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FKRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetmax_control::FKRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetmax_control::FKRequest_<ContainerAllocator>& v)
  {
    s << indent << "angle_rotate: ";
    Printer<double>::stream(s, indent + "  ", v.angle_rotate);
    s << indent << "angle_left: ";
    Printer<double>::stream(s, indent + "  ", v.angle_left);
    s << indent << "angle_right: ";
    Printer<double>::stream(s, indent + "  ", v.angle_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETMAX_CONTROL_MESSAGE_FKREQUEST_H
